From 5ab61635776852f9f0bc4dc135537f9e7710f92a Mon Sep 17 00:00:00 2001
From: Joachim Breitner <mail@joachim-breitner.de>
Date: Mon, 9 Nov 2009 12:20:57 +0100
Subject: Fix som bison errors

---
 sfworks/xpath/impl3/xpathParser.y |   16 ++++++++--------
 sfworks/xslt/impl/xsltParser.y    |   16 ++++++++--------
 2 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/sfworks/xpath/impl3/xpathParser.y b/sfworks/xpath/impl3/xpathParser.y
index a6adc6a..9f3c218 100644
--- a/sfworks/xpath/impl3/xpathParser.y
+++ b/sfworks/xpath/impl3/xpathParser.y
@@ -196,7 +196,7 @@ abbreviatedStep: '.'
 
 axisExpr:       AXISNAME OPDCOLON nodeTest   
                     {
-                        ExprImplPtr ep = NEW_EXPR(AxisExpr::make($1.asString(),
+                        ExprImplPtr ep = NEW_EXPR(AxisExpr::make($<asString()>1,
                             static_cast<Xpath::NodeTestExpr*>($<expr>3)));
                         if (ep.isNull()) {
                             throw Xpath::Exception(XpathMessages::parserBadAxis);
@@ -236,7 +236,7 @@ nodeTest:       nameTest
                 | NTEST_PI   '(' LITERAL ')'
                     {
                         $<expr>$ = 
-                            NEW_EXPR(PiNodeTestExpr::make($3.asString()));
+                            NEW_EXPR(PiNodeTestExpr::make($<asString()>3));
                     }
                 | NTEST_PI '(' ')' 
                     {
@@ -250,19 +250,19 @@ nameTest:       '*'
                     }
                 | NCNAME ':' '*'  
                     { 
-                        $<qname>$ = NEW_QNAME(new PQname("*", $1.asString()));
+                        $<qname>$ = NEW_QNAME(new PQname("*", $<asString()>1));
                     }
                 | qname            
                 ;    
 
 qname:          NCNAME  
                     {
-                        $<qname>$ = NEW_QNAME(new PQname($1.asString()));
+                        $<qname>$ = NEW_QNAME(new PQname($<asString()>1));
                     }
                 | NCNAME ':' NCNAME  
                     {
                         $<qname>$ = 
-                            NEW_QNAME(new PQname($3.asString(), $1.asString()));
+                            NEW_QNAME(new PQname($<asString()>3, $<asString()>1));
                     }
                 ;
 
@@ -283,7 +283,7 @@ primaryExpr:    variableReference
                 | LITERAL
                     {
                         $<expr>$ = NEW_EXPR(new ConstExpr
-                            (new StringValue($1.asString()))); 
+                            (new StringValue($<asString()>1))); 
                     }
                 | TNUMBER  
                     {
@@ -303,11 +303,11 @@ functionCall:   FUNCTIONNAME '(' functionArgumentList ')'
                     {
                         ExprImplPtr av = $<expr>3;
                         FunctionExpr* res = FUNC_FACTORY->makeFunction
-                            ($1.asString(), av.isNull() ? 0 :
+                            ($<asString()>1, av.isNull() ? 0 :
                                 static_cast<FunctionArgExpr*>(av.pointer()),
                                 ((ParserArgs*)pargs)->nsResolver);
                         if (0 == res) {
-                           throw Xpath::Exception(XpathMessages::parserUknFunc, $1.asString());
+                           throw Xpath::Exception(XpathMessages::parserUknFunc, $<asString()>1);
                         }
                         $<expr>$ = NEW_EXPR(res);
                     }
diff --git a/sfworks/xslt/impl/xsltParser.y b/sfworks/xslt/impl/xsltParser.y
index d3a0d50..0330e8b 100644
--- a/sfworks/xslt/impl/xsltParser.y
+++ b/sfworks/xslt/impl/xsltParser.y
@@ -155,7 +155,7 @@ locationPathPattern: XT_OPSLASH
 idKeyFunc:     XT_IDFUNC '(' XT_LITERAL ')'
                    {
                        Xpath::ExprImplPtr e = new Xpath::ConstExpr
-                           (new Xpath::StringValue($3.asString()));
+                           (new Xpath::StringValue($<asString()>3));
                        $<expr>$ = NEW_EXPR(PARGS(funcFactory)->makeFunction
                             ("id", (new Xpath::FunctionArgExpr(e, 0)), 
                             PARGS(nsResolver)));
@@ -163,9 +163,9 @@ idKeyFunc:     XT_IDFUNC '(' XT_LITERAL ')'
                | XT_KEYFUNC '(' XT_LITERAL ',' XT_LITERAL ')'
                    {
                        Xpath::ExprImplPtr e = new Xpath::ConstExpr
-                           (new Xpath::StringValue($3.asString()));
+                           (new Xpath::StringValue($<asString()>3));
                        Xpath::ExprImplPtr e1 = new Xpath::ConstExpr
-                           (new Xpath::StringValue($5.asString()));
+                           (new Xpath::StringValue($<asString()>5));
                        $<expr>$ = NEW_EXPR(PARGS(funcFactory)->
                             makeFunction("key", new Xpath::FunctionArgExpr
                                 (e, (new Xpath::FunctionArgExpr(e1, 0))), 
@@ -233,7 +233,7 @@ axisPredPair:   axisExpr predicate
 axisExpr:      XT_AXISNAME XT_OPDCOLON nodeTest
                    {    
                         Xpath::ExprImplPtr ae = NEW_EXPR 
-                            (Xpath::AxisExpr::make($1.asString(), 
+                            (Xpath::AxisExpr::make($<asString()>1, 
                                 static_cast<Xpath::NodeTestExpr*>($<expr>3)));
                         if (ae.isNull()) {
                             xpp_error("Invalid axis name");
@@ -290,7 +290,7 @@ nodeTest:       nameTest
                 | XT_NTEST_PI   '(' XT_LITERAL ')'
                     {
                         $<expr>$ = 
-                          NEW_EXPR(Xpath::PiNodeTestExpr::make($3.asString()));
+                          NEW_EXPR(Xpath::PiNodeTestExpr::make($<asString()>3));
                     }
                 | XT_NTEST_PI   '(' ')'
                     {
@@ -305,19 +305,19 @@ nameTest:       '*'
                     }
                 | XT_NCNAME ':' '*'  
                     { 
-                        $<qname>$ = NEW_QNAME(new PQname("*", $1.asString()));
+                        $<qname>$ = NEW_QNAME(new PQname("*", $<asString()>1));
                     }
                 | qname            
                 ;    
 
 qname:          XT_NCNAME  
                     {
-                        $<qname>$ = NEW_QNAME(new PQname($1.asString()));
+                        $<qname>$ = NEW_QNAME(new PQname($<asString()>1));
                     }
                 | XT_NCNAME ':' XT_NCNAME  
                     {
                         $<qname>$ = 
-                            NEW_QNAME(new PQname($3.asString(), $1.asString()));
+                            NEW_QNAME(new PQname($<asString()>3, $<asString()>1));
                     }
                 ;
 %%
-- 
1.6.6

